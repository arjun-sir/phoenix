openapi: 3.0.0
info:
  title: IMF Gadget Management API
  description: A secure API for managing IMF's top-secret gadget inventory
  version: 1.0.0
  contact:
    name: IMF Tech Division
servers:
  - url: http://localhost:3000
    description: Development server
  - url: https://phoenix-5rxl.onrender.com
    description: Production server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Gadget:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        status:
          type: string
          enum: [Available, Deployed, Destroyed, Decommissioned]
        userId:
          type: string
        DecommissionedAt:
          type: string
          format: date-time
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        missionSuccessProbability:
          type: string
          example: "85%"
    
    Error:
      type: object
      properties:
        error:
          type: string

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register new agent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
      responses:
        201:
          description: Agent registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid input or email already registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Acquire access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    description: JWT access token
                  refreshToken:
                    type: string
                    description: JWT refresh token
                  user:
                    $ref: '#/components/schemas/User'
        400:
          description: Email and password are required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
                  description: The refresh token received during login
      responses:
        200:
          description: New access token generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    description: New access token
        401:
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout and invalidate refresh token
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
                  description: The refresh token to invalidate
      responses:
        204:
          description: Successfully logged out
        401:
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /gadgets:
    get:
      tags:
        - Gadgets
      summary: List all gadgets
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [Available, Deployed, Destroyed, Decommissioned]
          description: Filter gadgets by status
      responses:
        200:
          description: List of gadgets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Gadget'
        400:
          description: Invalid status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Failed to fetch gadgets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - Gadgets
      summary: Add new gadget (auto-generates codename)
      security:
        - BearerAuth: []
      responses:
        201:
          description: Gadget created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Gadget'
        401:
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Failed to create gadget
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /gadgets/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
          format: uuid
        description: Gadget ID
    
    patch:
      tags:
        - Gadgets
      summary: Update gadget details
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: New name for the gadget
                status:
                  type: string
                  enum: [Available, Deployed, Destroyed, Decommissioned]
                  description: New status for the gadget
      responses:
        200:
          description: Gadget updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Gadget'
        400:
          description: Invalid status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Gadget not found or does not belong to you
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Failed to update gadget
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Gadgets
      summary: Decommission gadget
      security:
        - BearerAuth: []
      responses:
        200:
          description: Gadget decommissioned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Gadget'
        400:
          description: Gadget is already decommissioned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Gadget not found or does not belong to you
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Failed to decommission gadget
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /gadgets/{id}/self-destruct:
    post:
      tags:
        - Gadgets
      summary: Initiate self-destruct sequence
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Gadget ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - confirmationCode
              properties:
                confirmationCode:
                  type: string
                  description: 6-digit confirmation code
                  pattern: '^\d{6}$'
      responses:
        200:
          description: Self-destruct sequence initiated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "This gadget will self-destruct in 5 seconds... Not kidding!"
                  gadget:
                    $ref: '#/components/schemas/Gadget'
        400:
          description: Invalid confirmation code or gadget is already destroyed
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  validCode:
                    type: string
                    description: Valid code (included for testing purposes)
        401:
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Gadget not found or does not belong to you
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Failed to destroy gadget
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 